---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by javat.
--- DateTime: 2022/5/24 上午 05:41
---
--[[
By default, variables in Lua are global.
All local variables must be declared with 'local'
Unlike global variables, a local variable has its scope limited to the block where it is declared.
A block is the body of a control structure, the body of a function,
or a chunk (the file or string where the variable is declared)
]]

x = 10
local i = 1 -- local to the chunk
while i <= x do
    local x = i * 2 -- local to the while body
    print(x)    --> 2, 4, 6, 8, ...
    i = i + 1
end
if i > 20 then
    local x    -- local to the "then" body
    x = 20
    print(x + 2)    -- (would print 22 if test succeeded)
else
    print(x)    --> 10(the global one)
end
print(x)    --> 10(the global one)

--[[
Beware that this last example will not work as expected if you enter it in interactive mode.
In interactive mode, each line is a chunk by itself (unless it is not a complete command).

As soon as you enter the second line of the example (local i = 1), Lua runs it and starts a new chunk in the next line.
By then, the local declaration is already out of scope.

To solve this problem, we can delimit the whole block explicitly, bracketing it with the keywords do–end.
]]

-- to solve ax^2+bx+c=0
a=1 b=3 c=2 --global vars
do
    local x1, x2
    do
        local a2 = 2*a
        local d = (b^2 - 4*a*c)^(1/2)
        x1 = (-b + d)/a2
        x2 = (-b - d)/a2
    end -- scope of 'a2' and 'd' ends here

    print(x1, x2) -- 'x1' and 'x2' still in scope

end -- scope of 'x1' and 'x2' ends here
