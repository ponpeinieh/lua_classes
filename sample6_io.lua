---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by javat.
--- DateTime: 2022/5/24 下午 12:44
---

--[[
The Simple I/O Model
The I/O library offers two different models for file manipulation.
The simple model assumes a current input stream and a current output stream,
and its I/O operations operate on these streams.
The library initializes the current input stream to the process's standard input (stdin)
and the current output stream to the process's standard output (stdout).
Therefore, when we execute something like io.read(), we read a line from the standard input.

We can change these current streams with the functions io.input and io.output. A call like
io.input(filename) opens a stream over the given file in read mode and sets it as the current input
stream.

From this point on, all input will come from this file, until another call to io.input.

The function io.output does a similar job for output.
]]


--[[
io.write simply takes an arbitrary number of strings (or numbers) and writes them to the current output stream
We should avoid calls like io.write(a..b..c);
the call io.write(a, b,c) accomplishes the same effect with fewer resources, as it avoids the concatenations.

As a rule, you should use print only for quick-and-dirty programs or debugging;
always use io.write when you need full control over your output
]]

--[[

The function io.read reads strings from the current input stream.
Its arguments control what to read:
"a" :reads the whole file
"l" :reads the next line (dropping the newline)
"L" :reads the next line (keeping the newline)
"n" :reads a number
num :reads num characters as a string
]]

fh = io.input('input.txt') -- set the 'input.txt' file as the current input stream
t = io.read("a") -- read the whole file
t = string.gsub(t, "ppp", "qqq")
io.write(t)
fh:close()
--io.input(stdin)

fh2 = io.open('input.txt', 'r')
io.input(fh2) -- set the file handle fh2 as the current input stream
for count = 1, math.huge do
    local line = io.read("L") -- read the whole line and keep the newline
    if line == nil then break end
    io.write(string.format("%-3d ", count), line)
end
fh2:seek('set') -- rewind file for re-read

local count = 0
for line in io.lines() do -- io.lines() read the whole file into a table with each line as the element
    count = count + 1
    io.write(string.format("%03d ", count), line, '\n')
end
fh2:close()

fh3 = io.open('numbers.txt','r')
io.input(fh3)
sum =0
while true do
    m = io.read('n') -- read a number, when format error or eof will return nil
    if m then
        sum = sum + m
        io.write(string.format('%d+',m))
    else
        break
    end
end
io.write(string.format('%s=%d\n','\b',sum))
--fh3:close()

fh3:seek('set')
while true do
    local block = io.read(2^13) -- read at most 8k characters into block, return nil if eof
    if not block then break end
    io.write(block)
end