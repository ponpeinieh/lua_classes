---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by javat.
--- DateTime: 2022/5/23 下午 05:40
---
print("Hello World")

a = 100

print(a+1)
print(a^2)
print(math.pi)

-- in interactive mode (run lua54.exe)
-- dofile("sample1_intro.lua")

--comments
-- this is single line comment
--[[ this is multiple line comment
more comments
more comments ]]

--A common trick that we use to comment out a piece of code is to
--enclose the code between --[[ and --]], like here:
--[[
print(10)
--]]

--To reactivate the code, we add a single hyphen to the first line:
---[[
print(10)
--]]

--Lua needs no separator between consecutive statements,
--but we can use a semicolon if we wish.
x=1
y=2
--or
x1=1;
x2=2;
--or
x2=1; y2=2
--or
x3=1 y3=2

--global var
--Global variables do not need declarations; we simply use them
print(not_define_var)

--If we assign nil to a global variable, Lua behaves as if we have never used the variable
--Lua does not differentiate a non-initialized variable from one that we assigned nil.
xxx = nil

--Lua is a dynamically-typed language. There are no type definitions in the language;
--each value carries its own type.
--There are eight basic types in Lua: nil, Boolean, number, string, userdata, function, thread, and table.
--The function type gives the type name of any given value:
print(type(nil))
print(type(never_exist_var))
print(type(true)) --or false
print(type(10.4))
print(type("hello"))
print(type(print))
print(type({}))

--[[
In Lua, any value can represent a condition.
Conditional tests consider both the Boolean false and nil as false and anything else as true.
In particular, Lua considers both zero and the empty string as true in conditional tests.
]]
if 0 then print("0 is true") end

-- and, or, not
--[[
The result of the and operator is its first operand if that operand is false; otherwise, the result is its second operand.
The result of the or operator is its first operand if it is not false; otherwise, the result is its second operand:
> 4 and 5
> nil and 13
> false and 13
> 0 or 5
> false or "hi"
> nil or false
]]

--[[ run interactively for below:
mode = true
mode and print("we are in debug mode")
--]]


--Both and and or use short-circuit evaluation
i=10 a=5 b=1
print( (i ~= 0 and a/i > b))

--useful idioms
-- x = x or v   (equivalent to   if not x then x = v end ）
x = nil
x = x or 100
print(x)

-- a and b or c   (equivalent to the C expression a ? b : c, provided that b is not false.)

age = 16
price = age>18 and 100 or 200
print(price)

a=12 b=11
larger = a>b and a or b
print(larger)